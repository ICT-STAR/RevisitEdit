# We provide two implementations (objective_optimization):
#   1. prompt_last: the method of ROME's (https://arxiv.org/abs/2202.05262) original paper, which calculates nll loss through the last token of the input.
#   2. target_new: the standard autoregressive method, using the cross-entropy loss function

alg_name: "FT"
model_name: "./hugging_cache/llama-3-8b"
device: 0

layers: [21]
num_steps: 25
batch_size: 1
max_length: 40
lr: 5e-4
weight_decay: 0
kl_factor: 0
norm_constraint: false
# In our survey paper(https://arxiv.org/abs/2401.01286) 
# "prompt_last" corresponds to the results of FT-L.
# "target_new" corresponds to the results of FT-M.
objective_optimization: "prompt_last"
rewrite_module_tmp: "model.layers.{}.mlp.down_proj.weight"
layer_module_tmp: "model.layers.{}"
mlp_module_tmp: "model.layers.{}.mlp"
attn_module_tmp: "model.layers.{}.self_attn"
ln_f_module: "model.norm"
lm_head_module: "lm_head"
model_parallel: false

# evaluation
# "traditional" for the evaluation of EasyEdit: context-free, teacher-forcing, ground truth length, match ratio
# "real-world" for the evaluation in our paper: context-guided, autoregressive decoding, natural stop criteria, LLM-as-a-Judge
evaluation_framework: "traditional"  
# for real-world evaluation in our paper, you need to set
context_type: "question-only"  # "qa_inst" for QA task instruction; "chat_temp" for chat model; default config is question-only
metric_type: "exact_match"  # "exact_match" or "llm_judge"
api_key: "xxxxx"  # Openai api key for llm judge (GPT-4o-mini)